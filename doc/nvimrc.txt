*nvimrc.txt* Neovim configuration as a self-bootstrapping plugin.
*nvimrc*     0.0.1

                                  _                    ~
                       _ ____   _(_)_ __ ___  _ __ ___ ~
                      | '_ \ \ / / | '_ ` _ \| '__/ __|~
                      | | | \ V /| | | | | | | | | (__ ~
                      |_| |_|\_/ |_|_| |_| |_|_|  \___|~
                                                       ~

==============================================================================
CONTENTS                                                      *nvimrc-contents*

    1.Intro....................................|nvimrc-intro|
        1.1.Structure..........................|nvimrc-structure|
    2.Settings.................................|nvimrc-settings|
        2.1.Autocompletion settings............|nvimrc-settings-autocompletion|
        2.2.Unite settings.....................|nvimrc-settings-autocompletion|
        2.3.vimfiler settings..................|nvimrc-settings-vimfiler|
    3.Mappings.................................|nvimrc-mappings|
        3.1.Custom Neovim mappings.............|nvimrc-mappings-custom|
        3.2.Plugin specific mappings...........|nvimrc-mappings-plugin|
    i.About....................................|nvimrc-about|
    ii.License.................................|nvimrc-license|
    iii.Warranty...............................|nvimrc-warranty|

==============================================================================
1. Intro                                                         *nvimrc-intro*

This configuration system works as a meta-plugin:
all desired Neovim plugins are loaded from *plugins.vim* using vim-plug,
and any GUI specific options are set in `gui.vim`.
Overall configuration then follows a normal plugin structure.

This document concerns the details of this specific Neovim environment.
For installation instructions and development information, see

    https://github.com/rxrc/nvimrc

------------------------------------------------------------------------------
1.1 Structure                                                *nvimrc-structure*

All plugins are loaded in `plugins.vim` using vim-plug.
Some plugin settings must be set at plugin initialization.
Those settings are located at the bottom of `plugins.vim`.

All other settings are split into individual files organized
either by function or plugin.

Standard Neovim configuration is contained directly under `plugin`.
Plugin specific configuration is contained in a correspondingly
named `.vim` file in some (possible nested) directly under `plugin`.
Settings are grouped by plugin, or possibly by the function
of several interrelated plugins.

The `plugin/mappings` directory is reserved for mappings.
The `plugin/autocompletion` directory contains file type specific
autocompletion configuration.

Use of `autocmd` within `augroup` is preferred where possible over `ftplugin`
in order to group related configuration by plugin instead of file type.
Use of `ftplugin` is preferred only for native Neovim settings.

==============================================================================
2. Settings                                                   *nvimrc-settings*

This section provides an overview of Neovim and plugin configuration choices.

A general feature and usage overview is given below.
Plugins with more involved configurations are given their own subsection.

Environment
    - Persistent undo history enabled.
    - Loads local spellfile `.spellfile.utf-8.add`.
      Use `:Mklocalspell` to create or update the local spellfile.
    - Uses `$VIM_BACKGROUND` to set `background`.
    - Uses `$VIM_COLOR` to dynamically set airline theme.
    - Uses `$VIM_LANG` to set spelling language. Defaults to `en_us`.
    - Uses `$VIM_PYTHON` and `$VIM_PYTHON3` to set paths to python hosts.
      This is required to avoid conflicts with Python Virtual Environments.
      Defaults to `/bin/python` and `/bin/python3`.

Editor
    - Strips trailing whitespace on save.
    - Use [fzf] for line, path, and dictionary completion.

------------------------------------------------------------------------------
2.1 Autocompletion settings                    *nvimrc-settings-autocompletion*

Autocompletion is handled by deoplete and UltiSnips.
File type specific settings are defined under `plugin/autocompletion`.

Mappings (not listed under |nvimrc-mappings|)
    - <C-Space> opens the Unite UltiSnips buffer from normal mode.
    - <C-Space> starts manual completion from insert mode.
    - <C-J> and <C-K> navigate the popup in either direction.
    - <C-L> inserts and navigates snippets.
    - <C-H> acts as backspace while the popup is open.
    - <CR> closes the popup (keep completion).
    - <C-W> smart-closes the popup (cancel completion).

------------------------------------------------------------------------------
2.2 Unite settings                                      *nvimrc-settings-unite*

Unite will use ag, ack, or grep in that order.

Custom Unite buffer mappings
    - <C-J> and <C-K> navigate lines in insert mode.
    - <Esc> quits the buffer.

------------------------------------------------------------------------------
2.3 vimfiler settings                                *nvimrc-settings-vimfiler*

Custom vimfiler buffer mappings
    - <C-J>, <C-L>, and <Space> are reset to normal
      and do not use their standard vimfiler mappings.
    - <Tab> toggles marks.
    - <Space><Space> switches to the directory history.
    - <C-R> redraws the screen.

==============================================================================
3. Mappings                                                   *nvimrc-mappings*

With minor exceptions, all mappings are defined in individual `.vim` files
under `plugin/mappings`.

Conventionally, plugin specific mappings go in a file named after
the corresponding plugin, e.g., `fzf.vim`.

Alternatively, mappings spanning several interrelated plugs may be
grouped under a single file, e.g., `autocompletion.vim` may
contain mappings for deoplete, UltiSnips, etc.
(in which case the plugin names will appear in a comment if unspecified).

The special file `neovim.vim` is reserved for native Neovim mappings.

The remainder of this section documents mappings created or modified
by this plugin. For behavior, refer to either Neovim's or
the corresponding plugin's documentation.

A general overview is given below, while a complete reference
of all mappings is given in the following subsections.

Note: my keyboard maps `CapsLock` to `RCtrl` and `RCtrl` to `Esc`.

A mapping that depends on a plugin will contain the [Plugin Name]
in square brackets.

Critically different mappings
    - <Leader> is set to <Space> and <LocalLeader> is \.
    - Enter (or <Esc>) leaves insert mode.
      <C-CR> leaves terminal insert mode.
    - Use <C-CR> or <S-CR> to insert a newline (split the line)
      in normal or insert mode.
    - Enter opens command-line mode from normal or visual mode.
    - <S-Esc> toggles the command-line window in normal or visual mode.
    - U is mapped to redo and <C-R> is mapped to the original U key.
    - q and Q provide single key mappings for ge and gE.
    - <Tab> is mapped to q (since q is now mapped to ge).
    - <C-Tab> navigates the jump list in reverse (<C-I>).
    - ` and ' are swapped.
    - & is remapped to reuse flags (synonym for `:&&`).
    - [EasyClip] takes over m and M (<C-G> is mapped to M).
    - : is the [EasyClip] substitution operator.
      and <C-;> is the substitution operator for the system clipboard.
    - [Sneak] takes over s and S.
    - Marks are handled by [Signature] with <Leader>;.
      Use <Leader>;; to toggle marks.
    - Autocompletion with [deoplete] and [UltiSnips]:
      see |nvimrc-settings-autocompletion|.

Shortcuts for common functions
    - <C-H>, <C-J>, <C-K>, and <C-L> move between splits,
      move the cursor, scroll through history, and navigate popups.
      They serve as general alternatives to the arrow keys when possible.
      [Vim Tmux Navigator] implements split navigation.
    - <C-> and <C-=> moves lines up and down.
    - Double tap <Leader> to toggle folds.
    - Use <Tab><Tab> to record to `@q` and <C-Q> to playback `@q`.
    - <Leader>x is an easier to input shortcut for gx.
    - <Leader>o clears the highlighting until next search.
    - <Leader>= inserts from the expression register.
    - <Leader>p and <Leader>P paste from the system clipboard.
    - <Leader>c{motion} yanks to the system clipboard,
      <Leader>C yanks to end of line to the system clipboard,
      and <Leader>cc yanks the current line to the system clipboard.
    - <Leader>m{motion} deletes and yanks to the system clipboard,
      <Leader>M deletes and yanks to end of line to the system clipboard,
      and <Leader>mm deletes and yanks the current line to the system clipboard.
    - <Leader>:, <Leader>/, and <Leader>? open the corresponding
      command-line or search window.
    - [Commentary]: toggle commenting with \\.
    - [Emmet] leader is <C-O> and expander is <C-E>.

Shortcuts for windows, tabs, and splits
    - <Leader>{hjkl} splits the window.
    - <Leader>{HJKL} splits the frame.
    - <Leader><Tab> opens a new tab and <Leader><S-Tab> closes the tab.
    - <C-,> and <C-.> cycles through tabs.

Shortcuts for buffer manipulation
    - <Leader><CR> is a synonym for `:quit`.
    - <Leader>q is a synonym for `:quitall`.
    - <Leader>Q is a synonym for `:quitall!`.
    - <Leader>n is a synonym for `:enew`.
    - <Leader>E is a synonym for `:edit!`.
    - <Leader>s and <Leader>S are synonyms for `:update` and `:write!`.
    - [Bbye]: close and force close buffers with <Leader>w and <Leader>W.

Interfaces
    - [neoterm] <Leader><BS> opens a terminal.
    - [test] Run tests with <Leader>R, <Leader>rr, <Leader>ra, and <Leader>rl.
      Visit last test with <Leader>rg.
    - [Grepper]: <Leader>A will search with Grepper.
    - [Autoformat]: <Leader>+ will run `:Autoformat`.
    - [fugitive] functions all begin with <Leader>g.
    - [fzf] functions all begin with <Leader>f.
    - [Unite] buffers are mapped to <Leader>{abey}.
      See also |nvimrc-settings-unite|.
      If [fzf] is installed, will prioritize over Unite for some buffers.
    - [vimfiler]: open and focus with <Leader>i and toggle with <Leader>I.
    - [Tagbar]: open and focus with <Leader>t and toggle with <Leader>T.
    - [undotree]: open and focus with <Leader>u and toggle with <Leader>U.
    - For some file types, d and D will provide an interface to
      documentation lookup.
      Mapped for [fireplace], and [ri].

Toggles
    - coa toggles [Rainbow Parentheses].
    - cof toggles [EasyClip] paste formatting.
    - com toggles the colorcolumn display.
    - cop toggles the <Leader>p, <Leader>P, and <Leader>c
      mappings between using the `+` (default) and `*` registers.
    - coz toggles [Unicode] name or glyph completion.
    - coU toggles mappings between using [fzf] and [Unite].

------------------------------------------------------------------------------
3.1 Custom Neovim mappings                             *nvimrc-mappings-custom*

This section lists any standard Neovim mappings which this plugin remaps,
and any new mappings to existing Neovim functions.
All mappings are nonrecursive unless otherwise noted.

                                                        *com*
com                     Toggle system clipboard mappings between using
                        the + and * registers. See |<Leader>p|, |<Leader>P|,
                        and |<Leader>c|.

                                                        *cop*
cop                     Toggle display of colorcolumn.

                                                        *q*
q                       Mapped to the motion ge (recursive).

                                                        *Q*
Q                       Mapped to the motion gE (recursive).

                                                        *U*
U                       Mapped to <C-R> (redo).

                                                        *&*
&                       Synonym for `:&&`.

                                                        *'*
'                       Mapped to ` (` is swapped with ').

                                                        *`*
`                       Mapped to ' (` is swapped with ').

                                                        *<CR>*
<CR>                    Exit insert mode via <Esc>. In normal
                        or visual mode, open command-line mode.
                        Otherwise this still behaves like <CR>.
                        While the command-line and search windows are open,
                        this still executes the selected command or search:
                        Use <Leader>: to open command-line mode
                        from these windows.

                                                        *<C-CR>*
<C-CR>                  Insert a newline in normal or insert mode.
                        Exit to normal mode from terminal.

                                                        *<S-CR>*
<S-CR>                  Insert a newline in normal or insert mode.

                                                        *<S-Esc>*
<S-Esc>                 In normal or visual mode, toggle opening
                        and closing the command-line window.

                                                        *<C-Tab>*
<C-Tab>                 Mapped to <C-I> (equivalent to <Tab>).

                                                        *<C-G>*
<C-G>                   Mapped to M.

                                                        *<C-H>*
<C-H>                   In insert mode and command-line mode,
                        move cursor one character right.

                                                        *<C-J>*
<C-J>                   In command-line mode, navigate history down.

                                                        *<C-K>*
<C-K>                   In command-line mode, navigate history up.

                                                        *<C-L>*
<C-L>                   In insert mode and command-line mode,
                        move cursor one character right.

                                                        *<C-Q>*
<C-Q>                   Mapped to @q.

                                                        *<C-R>*
<C-R>                   Mapped to U.

                                                        *<C-->* *<C-+>*
<C-->                   Move lines up and down (using `:m`).
<C-=>

                                                        *<Leader>c*
                                                        *<Leader>C*
                                                        *<Leader>cc*
<Leader>cc       or     Same as y, but use the system register +.
<Leader>C        or     <Leader>cc yanks the current line.
<Leader>c{motion}       <Leader>C yanks to the end of line.
                        Can toggle between + and * registers using |cop|.

                                                        *<Leader>q*
                                                        *<Leader>E*
<Leader>E               Synonym for `:edit!`.

                                                        *<Leader>h* *<Leader>j*
                                                        *<Leader>k* *<Leader>l*
<Leader>{hjkl}          Split the window in corresponding direction.

                                                        *<Leader>H* *<Leader>J*
                                                        *<Leader>K* *<Leader>L*
<Leader>{HJKL}          Split the frame in corresponding direction.

                                                        *<Leader>m*
                                                        *<Leader>M*
                                                        *<Leader>mm*
<Leader>mm       or     Same as m, but move to the system register +.
<Leader>M        or     <Leader>mm moves the current line.
<Leader>m{motion}       <Leader>M moves to the end of line.
                        Can toggle between + and * registers using |cop|.

                                                        *<Leader>n*
<Leader>n               Synonym for `:enew`.

                                                        *<Leader>o*
<Leader>o               Synonym for `:nohlsearch`.

                                                        *<Leader>p* *<Leader>P*
<Leader>{pP}            Same as p and P, but use the system register +.
                        Can toggle between + and * registers using |cop|.

                                                        *<Leader>q*
<Leader>q               Synonym for `:quitall`.

                                                        *<Leader>Q*
<Leader>Q               Synonym for `:quitall!`.

                                                        *<Leader>s*
<Leader>s               Synonym for `:update`.

                                                        *<Leader>S*
<Leader>S               Synonym for `:write!`.

                                                        *<Leader>x*
<Leader>x               Mapped to gx.

                                                        *<Leader>,*
<Leader>,               Mapped to gT.

                                                        *<Leader>.*
<Leader>.               Mapped to gt.

                                                        *<Leader>/*
<Leader>/               Mapped to q/.

                                                        *<Leader>:*
<Leader>:               Mapped to q:.

                                                        *<Leader>=*
<Leader>=               Synonym for `:put` `=`

                                                        *<Leader>?*
<Leader>?               Mapped to q?.

                                                        *<Leader><CR>*
<Leader><CR>            Synonym for `:quit`.

                                                        *<Leader><Leader>*
<Leader><Leader>        Mapped to za.

                                                        *<Leader><Tab>*
<Leader><Tab>           Open a new tab.

                                                        *<Leader><S-Tab>*
<Leader><S-Tab>         Close the current tab.

------------------------------------------------------------------------------
3.2 Plugin specific mappings                           *nvimrc-mappings-plugin*

This section lists mappings to plugin specific functions,
and modifications to a plugin's normal provided mappings.

Each mapping's dependent plugin is prefixed
by the [Plugin Name] in square brackets.

                                                        *coa*
coa                     [Rainbow Parentheses] Synonym for `:RainbowToggle`.

                                                        *cof*
cof                     [EasyClip] Toggle paste formatting.

                                                        *coz*
coz                     [Unicode] Toggle unicode name or glyph completion.

                                                        *coU*
coU                     [fzf] [Unite] Toggle between fzf and Unite.


                                                        *m* *M* *mm*
mm               or     [EasyClip] Move motion.
M                or                mm moves the current line.
m{motion}                          M moves to the end of line.

                                                        *:* *::*
:                or     [EasyClip] Substitution operator.
::                                 :: substitutes the entire line.

                                                        *\\*
\\                      [Commentary] Mapped to gcc.

                                                        *<C-E>*
<C-E>                   [Emmet] In insert mode, emmet expander key.

                                                        *<C-G>* *<C-G><C-G>*
<C-G>            or     [EasyClip] Substitution operator for system clipboard.
<C-G><C-G>                         <C-G><C-G> substitutes the entire line.

                                                        *<C-O>*
<C-O>                   [Emmet] In insert mode, Emmet leader key.

                                                        *<Leader>a* *<Leader>b*
                                                        *<Leader>e* *<Leader>y*
<Leader>{abey}          [Unite] Open a Unite.vim buffer:
                                [a]g (grep), [b]uffers, fil[e]s, or [y]anks.

                        [fzf]   If installed, selectively use fzf instead.

                                                        *<Leader>d* *<Leader>D*
<Leader>{dD}            [fireplace] Prompt to lookup documentation with
                                    `:Doc` or `:FindDoc`.

                        [ri] Prompt to search for documentation:
                             result window split horizontally (d)
                             or vertically (D).


                                                        *<Leader>A*
<Leader>A               [Grepper] Prompt to search with Grepper.

                                                        *<Leader>f*
<Leader>f{acdefhjklmqstv/} or
<Leader>f<Space>        [fzf] Open a fzf search, e.g.,
                              <Leader>ff is a synonym for `:FzfFiles`.
                              Use <Leader>fm to lookup the other mappings.

                                                        *<Leader>g*
<Leader>g{abcdeghjklmrsw}
                        [fugitive] Synonyms for git wrapper commands.
                                   Use <Leader>fm to lookup the other mappings.

                                                        *<Leader>i* *<Leader>I*
<Leader>{iI}            [vimfiler] Focus vimfiler panel with i, toggle with I.

                                                        *<Leader>r*
                                                        *<Leader>R*
                                                        *<Leader>rr*
<Leader>rr       or     [test] Run tests: rr runs nearest, R runs file,
<Leader>R        or            ra runs all, rl runs last.
<Leader>r{agl}                 Use rg to return to the last test.

                                                        *<Leader>t* *<Leader>T*
<Leader>{tT}            [Tagbar] Focus Tagbar panel with t, toggle with T.

                                                        *<Leader>u* *<Leader>U*
<Leader>{uU}            [undotree] Focus undotree panel with u, toggle with U.

                                                        *<Leader>w* *<Leader>W*
<Leader>{wW}            [Bbye] Close the buffer but not the window:
                               w is a synonym for `:Bdelete` and
                               W is a synonym for `:Bdelete!`.

                                                        *<Leader>+*
<Leader>+               [Autoformat] Synonym for `:Autoformat`.

                                                        *<Leader>;*
                                                        *<Leader>;;*
<Leader>;{signature-mapping} or
<Leader>;;              [Signature] <Leader>; is the signature leader.
                                    <Leader>;; will toggle marks (<Leader>;.).

                                                        *+Leader><BS>*
<Leader><BS>            [neoterm] Synonym for `:Topen`.

==============================================================================
i. About                                                         *nvimrc-about*

This plugin is authored by Evan Sosenko.

Find the source and latest version at

    https://github.com/rxrc/nvimrc

==============================================================================
ii. License                                                    *nvimrc-license*

This Neovim configuration is licensed under the MIT license.

    https://github.com/rxrc/nvimrc/blob/master/LICENSE.txt.

==============================================================================
iii. Warranty                                                 *nvimrc-warranty*

This software is provided "as is" and without any express or
implied warranties, including, without limitation, the implied
warranties of merchantibility and fitness for a particular
purpose.

 vim:tw=78:sw=4:ft=help:norl:
